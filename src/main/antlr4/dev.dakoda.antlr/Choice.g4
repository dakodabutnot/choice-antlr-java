grammar Choice;
choice: root;

WS: [ \t\r] -> skip;
TRUE: T R U E;
FALSE: F A L S E;
ROOT_KEY: R O O T;
HERE_KEY: H E R E;
BOOLEAN_OPERATOR: GREATER_THAN | GREATER_THAN_EQUAL | LESS_THAN | LESS_THAN_EQUAL | EQUAL | NOT_EQUAL;
THEN: '-' T H E N '->';
IF_PREFIX: '-' I F '(';
SWITCH_PREFIX: '-' S W I T C H '(';
SELECTOR_SUFFIX: ')->';
ELSE: '-' E L S E '->';
ROOT_START: ROOT;
BRANCH_START: BRANCH;
VAR_START: VAR;
NEST_START: '{';
NEST_END: '};';
INTEGER: [0-9] | [1-9][0-9]*;
TEXT_CHARACTER_RESTRICTED: CHAR | INTEGER;
TEXT_CHARACTER: (CHAR | INTEGER | [- ?!(){}'/$#.,:+%^*@\\~|Â£<>]);
STRING: QUOTE (TEXT_CHARACTER | ';')+ QUOTE;
CHAR: [A-z];
FLOAT: ([0] | [1-9][0-9]*) ('.' INTEGER [1-9]*)?;
WHITESPACE: (' '|'\t');
NEWLINE: ('\r'?'\n'|'\r');
STATEMENT_END: ';';
EMPTY_STRING: QUOTE QUOTE;
METHOD: '#' TEXT_CHARACTER_RESTRICTED+;

float: FLOAT;
integer: INTEGER;
number: ('-')? (integer | float);
boolean: TRUE | FALSE;

branchName: STRING;
switchCase: STRING;
branchDisplay: STRING;
string: STRING;

arrayOfValues: '[' commaSeparatedVariables ']';
commaSeparatedVariables: (simpleVariable (',' simpleVariable)*);
simpleVariable: (boolean | string | number | ('-')? variableKeywords);
variable: simpleVariable | arrayOfValues;
method: ('-')? (methodWithoutParams | methodWithParams) methodInnerVariable*?;
methodInnerVariable: ('.' TEXT_CHARACTER_RESTRICTED+);
methodWithoutParams: METHOD;
methodWithParams: METHOD '(' (variable | commaSeparatedVariables | method) ')';
methods: method (',' method)*?;
booleanExpression: boolean | simpleBooleanExpression | reversedBoolean;
simpleBooleanExpression: (number | method) BOOLEAN_OPERATOR (number | method);
reversedBoolean: '!('  simpleBooleanExpression ')';

variableKeywords: (HERE_KEY | ROOT_KEY) variableKeywordInnerVariable*?;
variableKeywordInnerVariable: ('.' TEXT_CHARACTER_RESTRICTED+);

content: (NEWLINE | branch | branchVar | selector)*;
elseContent: (NEWLINE | branch | branchVar | selector)*;
rootStart: ROOT_START variable? NEST_START NEWLINE;
nestEnd: NEST_END;
root: rootStart content nestEnd;

branchVariableOrMethod: (variable | methods | variable THEN methods);
branch: simpleBranch | blankBranch | nestingBranch | ifBranchTernary;
blankBranch: BRANCH_START branchName (',' branchDisplay)? '~' STATEMENT_END? NEWLINE;
simpleBranch: BRANCH_START branchName (',' branchDisplay)? '~' branchVariableOrMethod? STATEMENT_END NEWLINE;
nestingBranch: BRANCH_START branchName (',' branchDisplay)? '~' branchVariableOrMethod? NEST_START NEWLINE content nestEnd;
switchBranch: switchBranchNormal | switchBlankBranch;
switchBranchNormal: switchCase branch;
switchBlankBranch: switchCase BRANCH_START '~';
ifBranchTernary: BRANCH_START booleanExpression branch;

branchVar: branchSimpleVar | branchNestingVar;
branchSimpleVar: VAR_START variable STATEMENT_END NEWLINE;
branchNestingVar: VAR_START simpleNest;
simpleNest: NEST_START NEWLINE branchNestingVarContent nestEnd;
varNest: NEST_START NEWLINE branchNestingVarContent '}';
branchNestingVarContent: (keyValuePair | NEWLINE)*;
key: STRING;
value: (simpleVariable | varNest | arrayOfValues);
keyValuePair: key ':' value ',' NEWLINE;

selector: if | switch;
switch: '-switch(' (variable | method | variableKeywords) ')->' NEST_START switchContent nestEnd;
switchContent: (NEWLINE | switchBranch)*;
if: normalIf | ifElse;
normalIf: '-if(' (booleanExpression | variableKeywords) ')->' NEST_START content nestEnd;
ifElse: '-if(' (booleanExpression | variableKeywords) ')->' NEST_START content '}' ELSE NEST_START elseContent nestEnd;


fragment A: 'a';
fragment B: 'b';
fragment C: 'c';
fragment D: 'd';
fragment E: 'e';
fragment F: 'f';
fragment G: 'g';
fragment H: 'h';
fragment I: 'i';
fragment J: 'j';
fragment K: 'k';
fragment L: 'l';
fragment M: 'm';
fragment N: 'n';
fragment O: 'o';
fragment P: 'p';
fragment Q: 'q';
fragment R: 'r';
fragment S: 's';
fragment T: 't';
fragment U: 'u';
fragment V: 'v';
fragment W: 'w';
fragment X: 'x';
fragment Y: 'y';
fragment Z: 'z';
fragment GREATER_THAN: '>';
fragment LESS_THAN: '<';
fragment GREATER_THAN_EQUAL: GREATER_THAN '=';
fragment LESS_THAN_EQUAL: LESS_THAN '=';
fragment EQUAL: '==';
fragment NOT_EQUAL: NOT '=';
fragment NOT: '!';
fragment COMMA: ',';
fragment QUOTE: '"';
fragment ROOT: '=>';
fragment VAR: '~>';
fragment BRANCH: '->';